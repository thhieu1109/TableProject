let dataFood; // bi·∫øn to√†n c·ª•c

// H√†m l·∫•y danh s√°ch m√≥n ƒÉn v√† hi·ªÉn th·ªã ra giao di·ªán
async function getDish(search) {
    const dishData = await getAll(URL_DISH); // G·ªçi API ƒë·ªÉ l·∫•y danh s√°ch m√≥n ƒÉn
    dataFood = dishData;
    const dishContainer = document.querySelector(".dish"); // Khu v·ª±c hi·ªÉn th·ªã m√≥n ƒÉn

    const searchDish = dishData.filter(element => element.name.toLowerCase().includes(search?.toLowerCase()));
    dishContainer.innerHTML = "";

    searchDish.forEach(dishItem => {
        // T·∫°o th·∫ª div ƒë·ªÉ ch·ª©a th√¥ng tin t·ª´ng m√≥n
        const dishCard = document.createElement("div");
        dishCard.classList.add("col");

        // T·∫°o n·ªôi dung HTML cho m√≥n ƒÉn
        dishCard.innerHTML = `
            <div class="card dishcard mb-3 position-relative text-center ">
                    <div class="d-flex justify-content-between align-items-center p-2">
                        <h1 class="corner-number fs-6 mb-0">${dishItem.id}</h1>
                        <h6 class="mb-0 flex-grow-1 mx-2">${dishItem.name}</h6>
                        <div >
                            <i onClick="editFood(${dishItem.id})" class="fa-solid fa-pen-to-square edit-icon me-3" data-bs-toggle="modal"
                                data-bs-target="#addFoodModal"></i>
                              <i onClick="deleteFood(${dishItem.id})" data-bs-toggle="modal" data-bs-target="#deleteModal" class="fa-solid fa-trash delete-icon text-danger"></i>
                        </div>
                    </div>
                    <img src="${dishItem.img}" class="card-img-top m-auto" style="height: 150px" alt="...">
                    <p class="text-danger fw-bold">${dishItem.price} VND</p>
                    <div class="d-flex justify-content-center align-items-center mb-2">
                        <button class="btn minus rounded-btn btn-sm rounded-circle bg-danger text-white me-2">-</button>
                        <input type="text" class="form-control quantity text-center w-25" value="0">
                        <button class="btn plus rounded-btn btn-sm rounded-circle bg-danger text-white ms-2">+</button>
                    </div>
                </div>`;

        // Th√™m m√≥n ƒÉn v√†o giao di·ªán
        dishContainer.appendChild(dishCard);

        // T√¨m c√°c n√∫t v√† input s·ªë l∆∞·ª£ng b√™n trong m√≥n ƒÉn hi·ªán t·∫°i
        const minusBtn = dishCard.querySelector(".minus");
        const plusBtn = dishCard.querySelector(".plus");
        const quantityInput = dishCard.querySelector(".quantity");

        // TƒÉng s·ªë l∆∞·ª£ng khi b·∫•m "+"
        plusBtn.addEventListener("click", () => {
            quantityInput.value = parseInt(quantityInput.value) + 1;
        });

        // Gi·∫£m s·ªë l∆∞·ª£ng khi b·∫•m "-", nh∆∞ng kh√¥ng nh·ªè h∆°n 0
        minusBtn.addEventListener("click", () => {
            if (parseInt(quantityInput.value) > 0) {
                quantityInput.value = parseInt(quantityInput.value) - 1;
            }
        });
    });
}

// G·ªçi h√†m ƒë·ªÉ hi·ªÉn th·ªã danh s√°ch m√≥n ƒÉn khi trang ƒë∆∞·ª£c t·∫£i
getDish("");



//-----------------------------UPLOAD H√åNH ·∫¢NH M√ìN ƒÇN------------------------------------------------------

// Bi·∫øn to√†n c·ª•c ƒë·ªÉ l∆∞u file ·∫£nh m√≥n ƒÉn ng∆∞·ªùi d√πng ch·ªçn
let selectedFoodImageFile;

// G·∫Øn s·ª± ki·ªán khi ng∆∞·ªùi d√πng ch·ªçn ·∫£nh m√≥n ƒÉn
const foodImageInput = document.getElementById("foodImage");
foodImageInput.addEventListener("change", handleFoodImageSelect);

// X·ª≠ l√Ω khi ng∆∞·ªùi d√πng ch·ªçn file ·∫£nh
function handleFoodImageSelect(event) {
    const file = event.target.files[0];
    if (!file) return;

    const reader = new FileReader();
    reader.readAsDataURL(file);

    // Sau khi ƒë·ªçc xong ·∫£nh, hi·ªÉn th·ªã preview l√™n giao di·ªán
    reader.onload = (e) => {
        document.getElementById("img_book").src = e.target.result;
    };

    selectedFoodImageFile = file; // L∆∞u l·∫°i file ƒë·ªÉ upload sau
}

//---------------------------------X·ª¨ L√ù KHI B·∫§M "UPLOAD" M√ìN ƒÇN M·ªöI-------------------------------------------------
let currentEditingFoodId;
// L·∫•y n√∫t "Upload" ƒë·ªÉ th√™m m√≥n ƒÉn
const uploadFoodBtn = document.getElementById("uploadBtn");

uploadFoodBtn.addEventListener("click", async () => {
    // L·∫•y d·ªØ li·ªáu ng∆∞·ªùi d√πng nh·∫≠p
    const foodName = document.getElementById("foodName").value;
    const foodPrice = document.getElementById("foodPrice").value;

    // Upload ·∫£nh l√™n Cloudinary (ho·∫∑c d·ªãch v·ª• kh√°c)
    const uploadedImageUrl = await uploadImageToCloudinary(selectedFoodImageFile);
    let id = 1;
    dataFood.forEach(e => {
        if (e.id == id) {
            id++;
        } else {
            return
        }
    })
    // T·∫°o object m√≥n ƒÉn m·ªõi ƒë·ªÉ g·ª≠i l√™n API
    const newDish = {
        id: currentEditingFoodId ? currentEditingFoodId : id,
        name: foodName,
        img: uploadedImageUrl,
        price: foodPrice
    };
    if (currentEditingFoodId) {
        edit(URL_DISH, newDish);
    } else {
        // G·ª≠i y√™u c·∫ßu th√™m m√≥n ƒÉn v√†o danh s√°ch
        add(URL_DISH, newDish);
    }

});


// üëâ H√†m ch·ªânh s·ª≠a m√≥n ƒÉn khi ng∆∞·ªùi d√πng b·∫•m v√†o icon c√¢y b√∫t
function editFood(foodId) {

    currentEditingFoodId = foodId; // Ghi nh·ªõ ID m√≥n ƒëang ƒë∆∞·ª£c ch·ªânh s·ª≠a

    // üîç T√¨m m√≥n ƒÉn trong danh s√°ch theo ID
    const selectedFood = dataFood.find(food => food.id == foodId);

    // üìù G√°n th√¥ng tin m√≥n ƒÉn v√†o c√°c √¥ nh·∫≠p trong modal
    const foodNameInput = document.getElementById("foodName");
    foodNameInput.value = selectedFood.name;


    const foodPriceInput = document.getElementById("foodPrice");
    foodPriceInput.value = selectedFood.price;

    const foodImagePreview = document.getElementById("img_book");
    foodImagePreview.src = selectedFood.img;

    // üñäÔ∏è ƒê·ªïi t√™n ti√™u ƒë·ªÅ modal th√†nh "EDIT FOOD"
    const modalTitle = document.getElementById("addFoodLabel");
    modalTitle.innerText = "EDIT FOOD";

    // üîÑ ƒê·ªïi n√∫t "Upload" th√†nh "UPDATE"
    const uploadButton = document.getElementById("uploadBtn");
    uploadButton.innerText = "UPDATE";


}

// üëâ H√†m x·ª≠ l√Ω khi ng∆∞·ªùi d√πng b·∫•m icon th√πng r√°c ƒë·ªÉ x√≥a m√≥n ƒÉn
function deleteFood(foodId) {
    const confirmDeleteButton = document.getElementById("confirmDeleteBtn");

    // üß® G·∫Øn s·ª± ki·ªán x√≥a m√≥n ƒÉn khi ng∆∞·ªùi d√πng x√°c nh·∫≠n trong modal
    confirmDeleteButton.addEventListener("click", () => {
        deleted(URL_DISH, foodId); // G·ªçi h√†m x√≥a m√≥n ƒÉn kh·ªèi server
    });
}


const searchInput = document.querySelector(".custom-search-input");
searchInput.addEventListener("change", () => {
    getDish(searchInput.value || "");
})

const addFoodButton = document.querySelector(".btn-add-food");
addFoodButton.addEventListener("click", () => {
    document.getElementById("foodName").value = "";
    document.getElementById("foodPrice").value = "";
    document.getElementById("img_book").src = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSeobbIOkPKuBfaQ2icZDyYxETR_cTiuXaVRA&s";
    selectedFoodImageFile = null;
    currentEditingFoodId = null;
    document.getElementById("uploadBtn").innerText = "UPLOAD";
    document.getElementById("addFoodLabel").innerText = "ADD FOOD";
}
);



// ----------------------- ODER FUNC --------------------------

// L·∫•y n√∫t "ƒê·∫∑t m√≥n"
const orderButton = document.querySelector(".btn-order");

orderButton.addEventListener("click", async () => {
    // L·∫•y ID b√†n ƒë∆∞·ª£c ch·ªçn t·ª´ dropdown
    const selectedTableId = document.querySelector(".tableOption").value;

    // L·∫•y danh s√°ch c√°c card m√≥n ƒÉn trong giao di·ªán
    const dishCards = document.querySelectorAll(".dishcard");

    // L·∫•y to√†n b·ªô d·ªØ li·ªáu ƒë∆°n h√†ng t·ª´ API
    const allOrders = await getAll(URL_ORDER);

    // T√¨m ƒë∆°n h√†ng ƒë√£ t·ªìn t·∫°i cho b√†n ƒëang ch·ªçn
    const existingOrder = allOrders.find(order => order.id == selectedTableId);

    // N·∫øu ƒë∆°n h√†ng ƒë√£ t·ªìn t·∫°i th√¨ l·∫•y danh s√°ch bill, n·∫øu kh√¥ng th√¨ kh·ªüi t·∫°o m·∫£ng r·ªóng
    const currentBill = existingOrder ? existingOrder.bill : [];

    // Duy·ªát qua t·ª´ng m√≥n ƒÉn trong giao di·ªán ƒë·ªÉ ki·ªÉm tra s·ªë l∆∞·ª£ng ƒë·∫∑t
    dishCards.forEach(card => {
        const quantityInput = card.querySelector(".quantity").value;

        // Ch·ªâ x·ª≠ l√Ω n·∫øu s·ªë l∆∞·ª£ng l·ªõn h∆°n 0
        if (quantityInput > 0) {
            const foodId = card.querySelector(".corner-number").innerText;
            const existingFoodIndex = currentBill.findIndex(item => item.idFood == foodId);

            if (existingFoodIndex !== -1) {
                // N·∫øu m√≥n ƒÉn ƒë√£ t·ªìn t·∫°i trong bill, c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng
                currentBill[existingFoodIndex].quantity += parseInt(quantityInput);
            } else {
                // N·∫øu ch∆∞a c√≥, th√™m m·ªõi m√≥n ƒÉn v√†o bill
                currentBill.push({
                    idFood: foodId,
                    quantity: parseInt(quantityInput)
                });
            }
        }
    });

    // T·∫°o ƒë·ªëi t∆∞·ª£ng ƒë∆°n h√†ng m·ªõi
    const newOrder = {
        id: selectedTableId,
        bill: currentBill,
        status: "unpaid"
    };

    // G·ªçi API ƒë·ªÉ c·∫≠p nh·∫≠t ƒë∆°n h√†ng n·∫øu ƒë√£ c√≥, ho·∫∑c th√™m m·ªõi n·∫øu ch∆∞a c√≥
    if (existingOrder) {
        edit(URL_ORDER, newOrder);
    } else {
        add(URL_ORDER, newOrder);
    }
});




